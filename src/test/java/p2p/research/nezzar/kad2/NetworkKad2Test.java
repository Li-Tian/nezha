package p2p.research.nezzar.kad2;

import android.os.SystemClock;
import android.util.Log;
import org.junit.Test;

import java.util.Arrays;
import java.util.Iterator;

import static org.junit.Assert.*;

public class NetworkKad2Test {

    private static final String TAG ="TEST";

    @Test
    public void testRoute1() {
        int n = 5;
        int k = 3;
        String[] strValues = {
                "0011111011100001011111110110010001110110100100011101110001011010011100000110010011100110011110011010010101101111011111001110010110100101011000101110010111110011110001101110000011000001101000000000101000101111101000011100101101000100000100011101110111110000",
                "1001100010001101010011111010000010111011101111001000001000000010111001010101110111100111101001111111010010010000000011100101101011011001011001110111110101110000001100101000001011111001100110011101100001010100011010101000010010110100011101011001111000001111",
                "1010011101010101101100110110011111000111101100101100011001101101111010001110000100101001111100010100001000101101001110110100011101000010110101010100100010001100010100010110001000010111010011001001111110111101100011001101010011001010100110001110001011101110",
                "1101100111100001000101111111010101100111000100110001110010001001001010010011001111001111010010100100011100010011111110001000111110011010101100101010101001110011110010110101001100011111110100101100101011010110100010111101111110101011010001101111101001000011",
                "0001110011001101100110111111111100101011000111000010010010010100101100011011000000101010111010100011000000010110111101110111100001110100010110111111100101000110100010001110001100010110001000101100010000010001111011010001100011101111011100100010001001101011"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad2 network = new NetworkKad2(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute2() {
        int n = 8;
        int k = 3;
        String[] strValues = {
                "1100100110010111000110110010010111011011100101000100010110001011010001000001101100101110110110000100110001111100110110111110100001110110101110100100000010101111010101001101101011010010000100110100010001011001010011001111111001001101111110111001001110110010",
                "0111111011110001000101100111101011000110110111100011001010000110110111101010010010000010010001110010011000100111100111111010110100000001000100110011010011000110010011100010110101010001010110100011010111000000010000101101000000001100000000000101001101111111",
                "1100001000101111010111000000011011011110101110001011111000010110011000111011100100100011111000010011010100001101110100100001010101010000010001100110001100010110110011100000011000000101100110010111111000000110010001110000000011010101001111101100001001001010",
                "1011100000000011111110111111101011000000101111110011011110101101010101011110110001111100100110001110001010011101011100011111111110011111010000011101011110100110101010101011011100000101110000101111001110011100011111110111011000100011110111000001000001110100",
                "0001010001011100010111110000011010111000110111111110111110000000100000000111110000101100011111000100000001010010000101010010101010111010101001111011110100111010101001001011100011111101110100101010000000011110111100000110110101001101110011111101110100011110",
                "0010101100101101111000110111111000001011111100100010001011011000111000011101011101001001011101011101101100011010010001111000100111100000101000111110101101101010110010000010110100110111100100000000001111001110100110110001101001010001111010010100000100000100",
                "0100011011011110111001100010101011000010110011010010100010011101101111101000000101000000110110111101000111111100000001110010000101111111001011010011010110001110100010101011110011100100001101101011110001010110111100001110111110111010010011001000001100111110",
                "1011100101111001110011110010100000011001000001101000111011000110010101001100000010101010111010010101000001001100100011001100101001110001000001001010110001110111001000101110110001001100001000110011001011011001100011110101111001010010110011001000001001100110"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad2 network = new NetworkKad2(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute3() {
        int n = 10;
        int k = 3;
        String[] strValues = {
                "1110010010111100101011011110101010000010111111111011010101110110100111101100010101011010000011101010101110000101101111111000111001001010010110000101100001001011110101110110111101011001100100011101111110001111110000000000011101101010010110110011111000000111",
                "1000101111110111110011001101001011101100100010010001010111111100001110110011110100000100010100001000001010011011110000111001101010001101100101101001001111010010011110111011100011010011110001010111000011100111010011101110110101001011101010011111111000110101",
                "0001001010010010000010110010110010101011110110000100110001001111111111001000001100000111111100110111110011001110010111001101110010101001101001010011100110101111101101111001110111111100110100111001000111111011101101111001111011110000010100100001001010111011",
                "1001010010000110100101000101100011100011011011100101010000101000111001100011010010101001101001101000011000101000010110001000100111010011000110000000100011001001011100011111000110000100110111110111000001010101000010100100011000111100111110111101010110010011",
                "0110001010001001100101001010000011000011000100000001111001100010110101101000101101101011111100100010110100010110111111010011100111001010110010010101011111000001001010100000010101000101001000011110001101101101000100010101101010011100010001101001010110011111",
                "0011110111010101001000010110101001111101101001001001011000100010011111110111110011011100110011000011111111010100100101100100101101010010010110010000000011011111101010111110100011101110001101101101001001010011010111011011001111110101000011000001111000011110",
                "0000011101110010101101001010101101011001101100101001000001011000101110000100010101011100110100010000111111111111101111010011111110100000001001010110101110011111101100001001011011001001101000001111011010010000101000101010001010110101100000001110000001100101",
                "1010000001000100001001100010111011011111000111000010110010000010000000001010010000000000111000010011001001001000010010000000101110110011011000100111011101011000011011011100001110001000111000011000110110100001001110110100000000011101101100100101000111111110",
                "1010010000010110110100101001000010110100000100000111100010011001101101010010010110100100010000010110110010100001000100011010110100011011011011010110111011010110101101011101001101100000111001100111001101111101011111001100110110100010100010001001010011001001",
                "0011000000010011101001100001001111100001000111011101111110001001000000110000000100011110001000101100010000000001001001001110011111011010111111001000110101000101001110101110000001111110011100010100101001001110001100110101001100010111010010000101001010001011"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad2 network = new NetworkKad2(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute4() {
        int n = 10;
        int k = 3;
        String[] strValues = {
                "1110010100111001111100011111101010001100011100110101010000011101011101011000011001110001101000100001110001010010101000110101100101100010110101011110110110010000101000010111010101101001010110100011100010010011010011000000100000100011100000011101010001010100",
                "0000001011101011011100101101010110101101110111011100111101000111110011101011000001111110000010101001000000011101010100000000010010010011100101100111001101000011000101011111111001010101101100110010010000101011111101001100111100100110101000011110110000010011",
                "0111001101111111011000100011011000010000101101100101011111110101010110011110011010100101011111001101011010000110101111000001010110111000100111010001101110111100101111011110000001110110010010011010011001011001011111110100111000110001100111001101000111101011",
                "0010011101010010011010110011010000100011100010111010111111100110001101111000101101000001000001001101101011100001100000000010000111101111111011001110100110100101110000101110011111110010011000000010011100010000011101110101001011101110001000100111010011010000",
                "1101011001000010011110100100010010111011111101111010000100110110010110100110101100000010110000010000101111011111011010101011100011010110111100110111100110000011100111001110001100010100010010110111111110111110011001110010010011010001011000011011101110101000",
                "0001011001100010010101101000001110111011100011001001010111000101001110110100000101000100101110111000001001101010001110000101100100001111010011011111111101010010010101100101100100100000100000000101001001000011010001011100111100110100101010111101111110100010",
                "1010000101011010110001111101010111111001100111101111101000010001001010000100000110100110010000010111011001010110111000101010001101011100011110000001001101110011100001110010010000001101100010111100010100110011110101100100110010110101101011100010101100110110",
                "1001011011011011100000111101010001101111010010101101011000010100101110010101011111010101111001100101110100001001011000001101101000011010001010101101000110100111000010111010100001001111011000010110100100101011010111101001011101001101011011001111100100101001",
                "1100001100011010000100111001110100110110010000010111001110010111100010000001101100010101100100110100100010001000101111010010100000000110001001001001110110101010110101111110111100001010100111001001001000011000000001000101100111001100011011001010000100010011",
                "0011110010110110110000010010010011110011001001110110011110001100011000110110000100111111101111100011010100011010000010111110000010111100001111110110100000100111010111100101001101011101101001101010101010101001111000101001101100010000111101101100101110010001"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad2 network = new NetworkKad2(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute5() {
        int n = 20;
        int k = 3;
        NetworkKad2 network = new NetworkKad2(n, k);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute6() {
        int n = 100;
        int k = 3;
        NetworkKad2 network = new NetworkKad2(n, k);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute6b() {
        int n = 100;
        int k = 3;
        String[] strValues = {
                "1111001101101001010101111111000100101011000000001000001010100100000111111000111111110000011011000011110011100001010100100111101001111101100111100011000010111011110110100101000001000011100111011101010010101000011110001101110011111011011110011011001011101101",
                "1001000011000110000001111011111000001111100110000101111010101000001101101100100001011101011001000100101110000111010111101100101001000111011111111101111000001010110100010100011110100010011110010101111001001011011011111000111010101010011011000001111001001001",
                "0100111100000111001100010101011111000110010100011110110110010011011011101110111000010010010110100110110000001100100010000101110011010010011100100100110111110001101111011111100101110100111101011100111010001001101011101111001010111010110011001101011100110110",
                "1101111010101111011010110110100001100011011110101011110111100100011100111111100110011101111000101001011001000001011100101101100010100101101111101001100110010110001100011101010010100011000001000111100001111101101100011101110001011110011101100011001011111110",
                "1110011110111001110101000001001101111111010001001100110000111110110000101011011101110000001111001011100100011011000100101011011001100110001100111001000001111111010011010010100111001010101111101001010101111011011000000111111100011001101000101101101010101011",
                "0010010000010011001011000001100101011101110111011000010011101111001011100100100111100010110110010000000001000100111011111010111101111001111101101010101011000111111011101010001011011001011111100100100001101110010001010101010111110001110000100110110101100010",
                "0101010001100111011101011000100101001110111101001001111001010101000110110111010001011110011110000110111011011000001011111100111011110110000011110110100100001001000101010111110010011011010000111100100111101011010000101000001111001101010001011101011101000010",
                "1111010101001101000101110000110111010010001011110000110001011011010100111000001011011000100000011101111100111101101111100101100110011010110010000011100011000110110101010101111101011110011110011100000010011000001000100010000001111010101111111011110110101010",
                "1100011000011101001100001010110010000010001010010101010110110100000000001101000000011010111011100100000011000000111101000111101010101010011110101101100101101100001001010101001010000011100011010111010100100100100110000100100100111000111010010000100101110000",
                "0000101000011000111110011101110101010010111100101011100111101010010010000101010111011001000010100001110100001011111111011110010101010110010010101110000011010111011001010101110011101011010000001111001000000000110011000001001010000001001010101100100001010011",
                "1111010101001001100100110111000001000101011001100011011011110101110010101111011110011010001100000010000010010000100010011001100100101001000011000111110101101001011100111100000010101110100001001001110110111011101110101011010011100011011110011011101110101010",
                "1010000001110100010010110001101010010000111100110100011100011110010000110100001111110101101010101000010101001000011100110111111011111100101100110001111010000100101001000100110011110000000100010101011001101111010100001110000101010110000111101110010010101011",
                "0001001001000010011001110111110111110011001111100100110110001011101000100010111011010101000101100110001111010010000100100001000001001010011001000000001111001010011001001000010101000111101001111000010010010111001111011100001000101111001101000111000010000000",
                "0101101010010100000101111111110010001100000011000101011000111000100100101011101111101111110001001100100001111110100101111111111100100000011100110100000101001100111000110000111100111100101111011101011011100000001001001001111110101100110001000110011111011011",
                "1011001100011001001011011100110000000110010001110010010010000010010111001011101000001000001000110101001010000011101110111110110011000101010100010100001010011101110000010001111001101011100001110101111000011100101001111011101110110001001011010010011111001000",
                "0101000001100010010110010001100011000111100100111011010000111100111100101101011001100010001100101001111100010011011101000000101011111011001111100000101100101011000000000000011110001011000111100011011001010000001100010010010001101011011100010000010001100011",
                "1100110110110010111011010110101110110000011101111001110111110001100011001101100010110001100111000110001100001100001111000000111010001011010011111001010010011100100111000010111001100100101011010101001000010110001101001110101000010101110101001100000101101011",
                "0110111100111010001100111100011111001001011000000000000010000110001011111011001011000000011110101011100100111100000001001010111101010000100001010101100011000100000111010000000011000000110010111001011010100110111011101001011011010110011100100101000000000000",
                "0011101010101010001111011000101101100100111100100110110001111001100010001100010100011110111101001011000100110101110110010110110010110011011101000101101010011011111111001110110110010101100100101111011101001010111111100101011001111110011100001101110001010001",
                "0101111110101100100010010111101010111101110101011100111000110000100101100111000001011111101111000101100111000110001111111110011010111101111111111001000010111001111100001101111101110110100111010001011111011100000111011001100101110001100111111110011111100110",
                "0101111010100010110111101111001111000101101100001111100111011010001111101111110010011101000010000110001100001110010110000010011000011010110111001110111000100101010000101100111101100110101001111010111101011111010100010101111010111000111101000000111000110000",
                "0111110110000101001001110100101111110001000010100001100111101100000010110011100000010001101100101101001100101111101111110011100001101000110011000010001000101010000100011111101111001100001110101111000111101110011001110010110101010111000111101101000100010111",
                "1110010110011100011011010110000011100111111001000000001011001000111111000100110111111110111110100010001010000000011000001101100000101100010110111111100011110001101001110111011100011101011111011001000001111110011000001101000110111010111111101101100101011011",
                "1011110001110101100000111101100001111001011110000101010010010011101111100101001111110001011000110011101101111010110101011100000101011000110100100010110000000010111110100001010111000110101101100111110110100110001110000000110011011001001001000000100001100100",
                "1011010000011100010111010101001111000001110011111111100011010110100111000101001101010110001001111101100100010110111110100101000101110000101010111101111111101100010000110010111001101000011100001011010011101001100011111010000101001110111010001111010111100101",
                "0110000011001110000101010110111001010001011001000100011001010011110100011110011100101110101110110001000110011010010100011100100100001011110110011011001001000111100010100101000000110000011100001111100111101000111100110011011110011110111111001010011011110100",
                "1000000010111011101100110101010100111011011110010100100101011100110000001001010101000011111010110100110011001101101111110110110011000011000000001110010111001011011111001001100000000101010110000011000100001101001010100011000111010000001100110011000000011011",
                "1110100011100110100101010101000110100101011111110100000110010000011011001000111100111000110111101010101011011010000001000101101100000001010111001001101010010000010100000110101000100001010110110001001100001110101110001000010110011001101001111100111001111001",
                "1010101001001010101100100101111101001001010011001011001111010111111100011010111111110010001101100100011000111000010001110010001101110110111101101101000100110000110101010110011000010001001011100000001110101010111110001101100001101011100001001100101001100011",
                "1011010011110011101010111101000000101010100011001111110010110111000110111011000011111011100001111010010100111010101111100111010001010000000101101011000100010011111010001101111010000111000000111000010011011101001011001010010010010111011100111000001101001001",
                "0100111110001101101010110110010111100110111100101000001100010001111000010011001011011011110011000111010010000101110011000110000010100001110101110011101110111001011001100100001010110000110010001010100111111000000000110011001100111010110111110101000100001110",
                "0010001001011011101100100011010110110100001010101110001001100001011000101001000001001111000100101010111011101010111100111010100010000100010101110010011110101010001011111110011011011111010100000011100100100000100011011110100000101110110101011000011111011100",
                "1010110010101001010100011001111111110001001110001011110010010010001011110011010001001101111010100010011101000000111100111010010001101010000110111110110100000000100100000010101011011100001110110100110000110000110011011111001100110011000001000000011000010101",
                "0010110000101001010111101110110101101011001001101101000001011111111010010010010000111101100011000101110000110100011001011010101001010101101110101001001011100110000111110111101000111011111000111110000110100011010100101011100001010000100000101101110100000010",
                "0100110110101010000011110000111000111010000010100110101010101111010011001101111011101110111000001000111011111101101001111001000100010001100011000010000010111010101011010101001110011010100110111010101001000111100101001110100111010100100100000111000011010000",
                "1101111111110110110000100000000001000110001111001100110101101010101110010101111000101111100011011111001100110100000100000110000011110101100111100011100011101000100001011011010001010011100011111101101010011011110101011011100011011100000011101110101010110101",
                "1001100101011011111001111000001001000111000111110011000000000110011110010000000110000000101001000010110011000011011100010001100100000010100010001101110100001100101111111100101000101010101001000001001000010111100101010100010011010010001000110000000000100101",
                "0001110011000010111001011011010010111100100101001110001101111101010101010101111000000111111010010100010110011000100010100001101100010000001001101010001010001001111111100011000010010110011100001100110100110111111110001001000011011000110100011000001110010011",
                "1011011010010000110010110001000110001100011011010100010011011111111110010010111000001101110011111001000101111101111111000010101100111101001011101101101011001110011100010111011100100010000000000011011111001111110000110110000101110011001100000101001100011110",
                "0111110110011011000110101010000011001001011101010111001000011101101110011001101010011111010011110001001111101010110100110010100110100110001001100001100111101111110100110011001101010010111110111000000101100111000011101101100000111001101010000001011101001111",
                "1110100011110010001101000111100000110001010000110101000001001001111001000101100111101110101100101010100000000010110001101110101011010000101000110110111110100111111100011101110000000011001101111010110100001110010100001101010100101011011010011101001111101101",
                "0101100100001011001110101100100010111100001011010000000000011101100001101001100011010000101010111001010010111000010101100100010101101011000010001100101101100101101100100011010010100101100000101010011011100100100111001000001101101001110100101001010001111000",
                "1100100000000000011000111000100010100100111010110001000000101000010010101110010110100011001110010000110000110010111110111111101100111000000001100110111000111010010110110000001110100001111010100100000101010000000001110101001010110110111101000100100010110100",
                "0011101001101100010000001001100001100010011010110010010100010110111001011000110001100001101011010001001110110001111111011000010001011010010111011100010010111100010100111010010010111101100011011010110000001110010101110110000111101010101110110110010011011101",
                "0000111101011111000001010011101101111010001000011111000011001110011110110111110100001100111111100100101010011111110111011011011111100110100111101010101111001000110101001000111011000000001000101001000000000110011100000010100011001110110011011010001111100110",
                "0100010010001000101011110100000110001100001101100011001101111001111001000000100000100100011111001100000110100111011101111011010110010001110110001100011101000001100010110110011011101100110110001101111110111001100110101101010111000111100010001001011001001100",
                "1100011100100010001110111111011001110101001110110111111110000001101100111010101011111100101000001111100100011100010101110000101000111101100101100100011010101001100011110000011000111101101001001000110100001101011101100010010000011101000011011010001011001010",
                "0110000001011000100100101010000000001100000101000110110111100111010101101101110111000000110111110010110000101110010101000000101110111000101001011110101000111100010111000001011001111011111011010110000000011010100001101010011110101101110110100000010111111001",
                "0010000111011101001010001100011110101001001111010001111011010111100000101100010110011011101011100000101101001101010101111100101010111011010010000000110100110110010001001111110100010011000100011100110100111000101001011100101100101100001111101000100010001100",
                "0010001000100111001101011001111110001101101000100101000011001110100010111001110001000111110000101111011010000111101111111001001010000011011110110000110110010001111111111100111111101110011010001011010100111100110001010111011011101000111011111001111110111010",
                "0100000011111011111000111001001100001111100101010101110011010011100111000110100101101000111010001100111101011001111000001111111000110110100011111110100111000110111001011111110111000011111001001101100100111101011110001111101101011001100100111011001000111111",
                "1100001101011110011001111000101111111111101110010010010010000000010010111100011011000011011011011100110010000011000011000001010000000011110111010010111111101110000000110111110100000111001111101111111101011000100100011000000010011001000110000110111101111000",
                "1011011100010000011101101101001000010010100100110010100000001000111111001100000110010110111010000110100011111100001111110111110101001110010100110000001101001000100111110010001010111101101100011101011100011011001100001100111100001111101000100101010010101000",
                "1010111101000000000001100000001001100111110111011100101101010110000000101001010010111001101000101010100110001110011100110010110111101111001010001110010101110101111011011000100000111011010100100010000110001011011110001100000011010111000100100010001001000010",
                "1001000011110001000101100111110011010010100011110111110110110001100001001010000101100101011001101101101101001000100111100011100110000001101110110111100100111010010110101110000110010110011100110100000011111110101110110010111111100011100101110001001101110111",
                "0110111001111110101110110010100101010100001011111110001110010011111111111101010110010111000110001101111001010001101011011001101100001001001000111101100111011001000000110000100100001011101000110101011101101001001001000011000110100010001111001101000110001110",
                "0001001010101001011111011101001100110000001111011010100000100100011100000101110111010011110011001101001100101100111011101000101110001010101001100101010100100100010111000011000000110100000111111000100001111110100110110100111001000101011000101011001100000110",
                "1111010001110110110110110110001101001100001000110010100100011101001011010011000001110000010101111000011011100000101110110011110101000011111000111100101101000100001001001101000001100101100111100000111001100100111100100010100111010011010000100001111110100110",
                "1010010101101100111110010000111011100101111110011010001011110100011001110101101110010010110011101101000001110101100101101101010011110000001000110000000000000100110000100111111011000000001011101101110010101000001001110010000011010001010111011101100110110100",
                "1001101010001000010001000101001011100111011010100110100101111000101110111001001111001111110111100100011111110111000011011000111001011011010101110000100001001000110111110010111100011010111101001111110100011100011010110010111101100001000101100000110100001110",
                "1000000000110110001100101000100100110011001010111101111100000111111010010100101010101111000000000110010001011100111101001010010011101011101001111010101000110001110111010110011111110111000011110110010001010010101100110011010010011100100111111010001000010000",
                "0101011011000111111010110011000101111011001010110010000011110100100000101110010001111110101001011001000010101001000001001100011011111110000101101010101010011100001001010101101001001001010000111100110111001000110110110011001010111101000011011100001111011111",
                "0000010111001010100100000001011111101000100111000111011100001100011000111010001001100010100001111001110101001101000100011000001000010000111100110111100101010010110000010101010110111110001000111010101110110011111011001001000111100110000110010000110100101100",
                "1110000101000111010110000100101001111110111100011100100111010010001011011001110011010000010000111011001000011001000111000001001110111100111111111000000000001000010001110000001110001000101010101101100110000101010101001010100000010011001111101110001100111110",
                "1111110100010011011111100101010111010101111100101010010110000010001111010100001000101101100111101101010111001000011010000111000101100000100110100101111100100001100000111100011000000010100011000001110111101000100000101111111000010100100011111100001001111101",
                "1111000001100011001010101010001000001000001010011010001110000100011110011100001001110001110011011000100000010101011001010011001101001000001101010000010101101010001001100001101001111010111010001100011100101011001010111010101010110001110110001001010110101000",
                "0000110100110011011101111100110011100110001000111101101001010110100101111010010000100000110011101000000011110111011001000000100010101100110110101010111011101110111110100110100010101110101110011011010101111011111011101100001111101010110010000010001100011001",
                "1011000110110000100010011011010000101000101011111100111010101100111110010000100010110001000011011000111010110111100111110010010111011100100010110000001111100000101110011011110000000101111100100000001111000011001001101101111011100000110000100101100010011011",
                "0001101110001001110111011100100001110011000101101010111100111100100100011100111011111111100000001010111011110101101110011111000101110000011110101000100000110110000000010001100110111001001100000101011110100010010111111011011001010001101011110010111110011001",
                "0010001100101000010111010001001011011100011001011001101111000111010001110001001010010001001100111000111000001100100010011001101111000010010111010011000001100010010110000000100100000001011110110111001001100000001111001101101111110011010000100011001111111100",
                "0111110000010100000001111000100110001111100101100110111110101010010011011110000011101011111111010101101011100101010110011001010010010001111111110001110110001111100001101011100010110001100110010110110010100000101001000101010100111001111100011010101001100110",
                "0000010000001111100101001000001011101001001001000001101111111011100011100011011111110110011000010101010101001000100010000101101001000110001010101101000101100101011010101010000100000111010101001100111011100000011000101001010101011111100010110111111111010001",
                "0010010010001000110100111001101101011010010100100100000001001111000110101011001101011000110001001011111010101011001101000100000010100001111110100110111110010011111100110100100101010100100100011010111001100010110000111011001001010000110010110010010010111010",
                "0110110010111100001010100110101011111001111110111000111001011001110011000100110010010100101001000000100011011000011001101100111010100000011010111111100001111001011010111011000011001101101011101000011111000000011001001110101000001110101101011011101000000000",
                "0011000100111100100111011000011010100100000111010011100000000111010110010000000110000001000110100100001111101111010110110011000110010101101011110001110111101000101010010101100110100100010011010101010011010011101110000011001010011111011000110011011101101011",
                "0100111001100101010100001000111110010101000011101110010110111110001111000100001101101110101011000001000010101111101000110111000110011000101000100010001100001001011001011010001011000111111110010010001101100000111100110110010001010111011011000100101101001110",
                "0111111010101100101100110100110001011111110001011111000100101010001001010010101000110010000101001100101101100101100000011000101100010110100001001001100011011110101011111111111100010101001011101111011100110100001111001101101101011100111111101001010111001100",
                "0111011010111101010101100011110000000000011100011100100100001010110010101110101001010100000010001100000100010011011110100010111011110110111110011001001001110000010011110111011111001110101110010111001000111010101001111101011000111001110000000110010101110000",
                "0011000111100001011111110010000010110011000001001101000111101100110000100101001011001100100000010101111000001110000111101111001011010011011001011101110000100110110000010101111100010001011100001110010100111111000111000111101001100100010011110000100100000111",
                "1011100001110000010010101100011111111011111001000001110100100111100001001100011011111000001110010001100100000011001110101010110011110100111010001001000111110100111100100101110010000010011000010001000100111001101011111100001111001001001110010001101101101011",
                "0101000101011101000001000101100110110100000010001100011001011000010110101000001001101001010110011000101001011110111101000011100101111000010111110100101110101101010110111101110100101000110111001100010011111100001111001001101001000000001011011001111100110000",
                "0111000101111010010011011011111111110110001101110100101110001101010110001011110100001110001110000101001110001111100100011101110001010000001100111111011111101110001111101111111110101111001010110000101100111101101111011011010011111011001100010000100000100010",
                "1110110100011001101010110111111000000101001011010111010011000100101000001110100011100100000111111111000000001010010111100001000000111010111000011000011100011000011111110000101011000010101011111010111011101111011100000101010110100100001111010001010010010101",
                "1000110100000110010110001010010001000100111000001100101111101100101011111011011111000010011011100010000101110011001001110101110110110100010111101011101101101010001110100101111101110011011011011010001001101100100111101000111000101100010101100101111101111011",
                "0110010100111000111010001110000111110111100010100100010101110011001111101101111010101000101011001101001010110011110101000101111000011001011010100111001111101000010000011111101110101101011010100010101100101001011001010000001110111111101010000011110100100011",
                "1010010000011110001000000111110101000011010111011111001010011100100110001100001111101100101011011100011100000011101101100001100010000110100000000111101010111100111110000000101000010110000111011000010010110100101011100000000100010000000000001111101010001001",
                "1100001110000100011110010101111011010110011001011101111010101001010001101110011001001110010101001010110010110001010100001111011001000111010100011011100101100110010110111110110110110100111101101011110011001110101001111001010011100010110001110110100011101001",
                "1111001110111110100101100010111110011011010111100101100110001001101000110111010001111100000100110111001011000110111011110001011001100010111101000110100000001101001010011101010101100001010101101111000101111001011001001100110011110111100000111000110111101100",
                "0100111000101001110011101010111010001100110000100111001000001101111110010001100100001000010011110000111001010011111111001110110101010100111110110001010000001001011000000110101000010001010010101100100110110010001000111010010101000010111011011001110100010100",
                "0011111001011010011001010011011011111100111000000100000011101100101001101011000101000110101110010111101111000001100010111100100011001111011010101101001010111110010011101011100111110110101000111010010010001100111011001000110110001011011100000100101111000101",
                "1100001100100110000110100001001011000101010111010101001101101011101000011000010010000111101011010101001001100100001011101000001100001111110111011010001110110001010000110000010011101011010011000011101000110100110111001010110111011101000111011010000110101101",
                "1101110000100000101010010110011000001110110100110000110101100100111100110101000110101000010010100111011101000000001011011111000111101000101000001101110001000011100101010000000101111111100111000111101101001010000000000000001001100110111111011001101101111111",
                "1100110011010000010110110100100100101101000010111010110000110110010101110001101110111011010110101111001010100010101000111100110100111000110111100110110000110000010001011101011110110011000000000000001011101000101010111001000011010001101100111000101101000001",
                "0111001111011110010110010001110101100100100000110001101100111011110100011001110001001100100110110100010110111010000100011100000100010100010001011011100010010100111000110001010111011011101001100011001101101100100011101101111000111101001000100110100011011110",
                "1011010011000100010000100111101110001100001000010011011100001011111000011011110000100101111001010111100100011001100110110100010110000001000010001010010110001101100100111110100110001101110111000101101100010011000000100010101110100011101011100010100001011110",
                "0011110011000011001101010110001010110101101000001111001100100001001101100100000110001011010101010111101011101010111001101100010100000101111000101000010011010111100111100010011100101100000010001011010001101001111100000011011001110110000101101100110000101010",
                "0110110100100000010111100001010111000001010000100010001110001011000100100001000001010110101010000110111100011110000100010010001101100110100000111101110000000100000110011010000001111110001001101000110011001011010010000011011001000110110010001000101100000011",
                "1100010001000000010101111001011010101110000001110001011010000011000011101000000100101011011011001101011110001011000001001100011010001000011100001001101010011010001011110100010001100110101100001011011010011101001101011100111001010111110110011011010111001000",
                "0101100000111010110100001000000011110001010110110110101001001110010101111011101110000110111010111010101000011111011111000000010111101010101110111111110001101110010010111010000110111011000010110111010100111000001011000010101011100101100010000100001010011000",
                "0111110100010111110010001100010100010010100001100110001001111001100110110110001011001000101110101010111010000111000010001111001100000001001110101111101110000100010101101100100000110101000001011101101110011011111111010001000100110011111011011101111001000010"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad2 network = new NetworkKad2(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad2.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }


//    @Test
//    public void testRoute7() {
//        int n = 1000;
//        int k = 3;
//        NetworkKad2 network = new NetworkKad2(n, k);
//        long t1 = SystemClock.uptimeMillis();
//        Log.i(TAG, "Basic info initialized : " + t1);
//        network.construct();
//        Log.i(TAG, "Basic info initialized at cost of : " + t1);
//        NetworkKad2.Report report = network.verifyFull();
//        Log.i(TAG, report.toString());
//        assertEquals(report.tryCount, report.successCount);
//    }


}