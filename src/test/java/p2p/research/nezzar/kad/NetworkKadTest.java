package p2p.research.nezzar.kad;

import android.os.SystemClock;
import android.util.Log;
import org.junit.Test;

import java.util.Arrays;
import java.util.Iterator;

import static org.junit.Assert.*;

public class NetworkKadTest {

    private static final String TAG ="TEST";

    @Test
    public void testRoute1() {
        int n = 5;
        int k = 3;
        String[] strValues = {
            "0011111011100001011111110110010001110110100100011101110001011010011100000110010011100110011110011010010101101111011111001110010110100101011000101110010111110011110001101110000011000001101000000000101000101111101000011100101101000100000100011101110111110000",
            "1001100010001101010011111010000010111011101111001000001000000010111001010101110111100111101001111111010010010000000011100101101011011001011001110111110101110000001100101000001011111001100110011101100001010100011010101000010010110100011101011001111000001111",
            "1010011101010101101100110110011111000111101100101100011001101101111010001110000100101001111100010100001000101101001110110100011101000010110101010100100010001100010100010110001000010111010011001001111110111101100011001101010011001010100110001110001011101110",
            "1101100111100001000101111111010101100111000100110001110010001001001010010011001111001111010010100100011100010011111110001000111110011010101100101010101001110011110010110101001100011111110100101100101011010110100010111101111110101011010001101111101001000011",
            "0001110011001101100110111111111100101011000111000010010010010100101100011011000000101010111010100011000000010110111101110111100001110100010110111111100101000110100010001110001100010110001000101100010000010001111011010001100011101111011100100010001001101011"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad network = new NetworkKad(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute2() {
        int n = 8;
        int k = 3;
        String[] strValues = {
                "1100100110010111000110110010010111011011100101000100010110001011010001000001101100101110110110000100110001111100110110111110100001110110101110100100000010101111010101001101101011010010000100110100010001011001010011001111111001001101111110111001001110110010",
                "0111111011110001000101100111101011000110110111100011001010000110110111101010010010000010010001110010011000100111100111111010110100000001000100110011010011000110010011100010110101010001010110100011010111000000010000101101000000001100000000000101001101111111",
                "1100001000101111010111000000011011011110101110001011111000010110011000111011100100100011111000010011010100001101110100100001010101010000010001100110001100010110110011100000011000000101100110010111111000000110010001110000000011010101001111101100001001001010",
                "1011100000000011111110111111101011000000101111110011011110101101010101011110110001111100100110001110001010011101011100011111111110011111010000011101011110100110101010101011011100000101110000101111001110011100011111110111011000100011110111000001000001110100",
                "0001010001011100010111110000011010111000110111111110111110000000100000000111110000101100011111000100000001010010000101010010101010111010101001111011110100111010101001001011100011111101110100101010000000011110111100000110110101001101110011111101110100011110",
                "0010101100101101111000110111111000001011111100100010001011011000111000011101011101001001011101011101101100011010010001111000100111100000101000111110101101101010110010000010110100110111100100000000001111001110100110110001101001010001111010010100000100000100",
                "0100011011011110111001100010101011000010110011010010100010011101101111101000000101000000110110111101000111111100000001110010000101111111001011010011010110001110100010101011110011100100001101101011110001010110111100001110111110111010010011001000001100111110",
                "1011100101111001110011110010100000011001000001101000111011000110010101001100000010101010111010010101000001001100100011001100101001110001000001001010110001110111001000101110110001001100001000110011001011011001100011110101111001010010110011001000001001100110"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad network = new NetworkKad(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute3() {
        int n = 10;
        int k = 3;
        String[] strValues = {
                "1110010010111100101011011110101010000010111111111011010101110110100111101100010101011010000011101010101110000101101111111000111001001010010110000101100001001011110101110110111101011001100100011101111110001111110000000000011101101010010110110011111000000111",
                "1000101111110111110011001101001011101100100010010001010111111100001110110011110100000100010100001000001010011011110000111001101010001101100101101001001111010010011110111011100011010011110001010111000011100111010011101110110101001011101010011111111000110101",
                "0001001010010010000010110010110010101011110110000100110001001111111111001000001100000111111100110111110011001110010111001101110010101001101001010011100110101111101101111001110111111100110100111001000111111011101101111001111011110000010100100001001010111011",
                "1001010010000110100101000101100011100011011011100101010000101000111001100011010010101001101001101000011000101000010110001000100111010011000110000000100011001001011100011111000110000100110111110111000001010101000010100100011000111100111110111101010110010011",
                "0110001010001001100101001010000011000011000100000001111001100010110101101000101101101011111100100010110100010110111111010011100111001010110010010101011111000001001010100000010101000101001000011110001101101101000100010101101010011100010001101001010110011111",
                "0011110111010101001000010110101001111101101001001001011000100010011111110111110011011100110011000011111111010100100101100100101101010010010110010000000011011111101010111110100011101110001101101101001001010011010111011011001111110101000011000001111000011110",
                "0000011101110010101101001010101101011001101100101001000001011000101110000100010101011100110100010000111111111111101111010011111110100000001001010110101110011111101100001001011011001001101000001111011010010000101000101010001010110101100000001110000001100101",
                "1010000001000100001001100010111011011111000111000010110010000010000000001010010000000000111000010011001001001000010010000000101110110011011000100111011101011000011011011100001110001000111000011000110110100001001110110100000000011101101100100101000111111110",
                "1010010000010110110100101001000010110100000100000111100010011001101101010010010110100100010000010110110010100001000100011010110100011011011011010110111011010110101101011101001101100000111001100111001101111101011111001100110110100010100010001001010011001001",
                "0011000000010011101001100001001111100001000111011101111110001001000000110000000100011110001000101100010000000001001001001110011111011010111111001000110101000101001110101110000001111110011100010100101001001110001100110101001100010111010010000101001010001011"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad network = new NetworkKad(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute4() {
        int n = 10;
        int k = 3;
        String[] strValues = {
                "1110010100111001111100011111101010001100011100110101010000011101011101011000011001110001101000100001110001010010101000110101100101100010110101011110110110010000101000010111010101101001010110100011100010010011010011000000100000100011100000011101010001010100",
                "0000001011101011011100101101010110101101110111011100111101000111110011101011000001111110000010101001000000011101010100000000010010010011100101100111001101000011000101011111111001010101101100110010010000101011111101001100111100100110101000011110110000010011",
                "0111001101111111011000100011011000010000101101100101011111110101010110011110011010100101011111001101011010000110101111000001010110111000100111010001101110111100101111011110000001110110010010011010011001011001011111110100111000110001100111001101000111101011",
                "0010011101010010011010110011010000100011100010111010111111100110001101111000101101000001000001001101101011100001100000000010000111101111111011001110100110100101110000101110011111110010011000000010011100010000011101110101001011101110001000100111010011010000",
                "1101011001000010011110100100010010111011111101111010000100110110010110100110101100000010110000010000101111011111011010101011100011010110111100110111100110000011100111001110001100010100010010110111111110111110011001110010010011010001011000011011101110101000",
                "0001011001100010010101101000001110111011100011001001010111000101001110110100000101000100101110111000001001101010001110000101100100001111010011011111111101010010010101100101100100100000100000000101001001000011010001011100111100110100101010111101111110100010",
                "1010000101011010110001111101010111111001100111101111101000010001001010000100000110100110010000010111011001010110111000101010001101011100011110000001001101110011100001110010010000001101100010111100010100110011110101100100110010110101101011100010101100110110",
                "1001011011011011100000111101010001101111010010101101011000010100101110010101011111010101111001100101110100001001011000001101101000011010001010101101000110100111000010111010100001001111011000010110100100101011010111101001011101001101011011001111100100101001",
                "1100001100011010000100111001110100110110010000010111001110010111100010000001101100010101100100110100100010001000101111010010100000000110001001001001110110101010110101111110111100001010100111001001001000011000000001000101100111001100011011001010000100010011",
                "0011110010110110110000010010010011110011001001110110011110001100011000110110000100111111101111100011010100011010000010111110000010111100001111110110100000100111010111100101001101011101101001101010101010101001111000101001101100010000111101101100101110010001"
        };
        Iterator<String> itr = Arrays.asList(strValues).iterator();
        NetworkKad network = new NetworkKad(n, k, itr);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute5() {
        int n = 8;
        int k = 3;
        NetworkKad network = new NetworkKad(n, k);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }

    @Test
    public void testRoute6() {
        int n = 10;
        int k = 3;
        NetworkKad network = new NetworkKad(n, k);
        long t1 = SystemClock.uptimeMillis();
        Log.i(TAG, "Basic info initialized : " + t1);
        network.construct();
        Log.i(TAG, "Basic info initialized at cost of : " + t1);
        NetworkKad.Report report = network.verifyFull();
        Log.i(TAG, report.toString());
        assertEquals(report.tryCount, report.successCount);
    }


}